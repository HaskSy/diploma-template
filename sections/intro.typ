#import "../lib.typ": *

#set heading(numbering: none)
= Введение <intro>

// Структура данных наследует свою сложность от предметных областей
// Персистентность -- хорошо. Более безопасные с точки зрения многопоточности программы. (Напиши по умному про отсутствие внезапных изменений в состоятии модели)
// Персистентное обновление -- отсутствие неявных наблюдамых изменений
// Позволяет рассуждать проще о состоянии программы
Cтруктуры данных, возникающие в процессе разработки программного обеспечения (ПО), наследуют свою сложность от предметной области, которую они описывают. В то же время, персистентное взаимодействие упрощает рассуждения об этих структурах данных, избавляя нас от неявных изменения и позволяя рассуждать о состоянии программы локально. А также, персистентность помогает избегать многих ошибок параллельного программирования. Однако, персистентная работа со сложными структурами данных --- тот еще геморрой. Поэтому требуются специальные инструменты, для упрощения персистентной работой со структурами данных.

В функциональном программировании существует механизм "Оптики" для упрощенного описания персистентного взаимодействия. Однако требует множество языковых средств, в основном распространенные в функциональных языках (Higher-kinded полиморфизм, let-полиморфизм, классы типов и т.д.), что делает задачу переноса "Оптики" в объектно-ориентированные языки достаточно затруднительной.

В данной работе рассматривается добавление механизма "Оптики" в язык @cangjie. Для этого, во-первых, были приведены примеры сценариев, где применение "Оптики" упрощало бы взаимодействие со сложными структурами данных. Во-вторых, были проведен детальный анализ предметной области "Оптики": существующие модели "Оптики", реализации в объектно-ориентированных языках. В-третьих, на основе опыты других реализаций, была реализована версия для языка, с соответсвующими модификациями, позволяющими ей быть близкой по производительности с аналогичным императивным кодом. И наконец, библиотека "Оптики" была реализована и протестирована.
