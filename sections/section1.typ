#import "../lib.typ": *

= Анализ предметной области

В данной главе будет дан обзор концепиям и понятиям, существующим на данный момент в языке Cangjie. Также будут рассмотрены на примерах возможности языка @dsl:pl
== Язык Cangjie и его возможности
#definition("Система типов")[
  Гибко управляемый синтаксический метод доказательства
]
#definition("типов sf sdf sdf sd")[
  Гибко управляемый синтаксический метод доказательства
]

=== Процедурные макросы
=== Блоки-расширения
=== Струкруты/Классы/enum/кортежи
=== Замыкания
=== Properties
=== Инвариантный параметрический полиморфизм
=== Области видимости и приватность
=== Инстанциирующий/Стирающий параметрический полиморфизм
== Описание проблемы и возможных решений
Если исключать из обсуждения `struct`, то, на данным момент, ни семантика языка @cangjie, ни его стандартная библиотека не предоставляют удобного интерфейса для пересоздания неизменяемых структур данных, на основе их текущиx значений. Также, отсутствует удобный способ модификации изменяемого объекта, без смены его состояния. Модификация сложных структур данных, является проблематичной даже для `struct`, в случае, если полями являются не любые струкруты данных, отличные от `struct`.

В этом разделе мы рассмотрим некоторые распространенные случаи, в которых заметна нехватка выразительности языка и в то же время, код, который необходимо написать, достаточно прост, но громоздок
=== Неизменяемые структуры данных
Стандартной, и достаточно распространенной неизменяемой структурой данных в языке, модификация которой, является затруднительной являются кортежи.

Допустим, что у нас, есть кортеж из 4 элементов - адекватный размер, который может встретиться в промышленном коде

```cangjie
main(): Unit {
    let csvRow = viewCsvRow("file.csv", 1)
    let (id, name, age, email) = csvRow
    updateCsvRow("file.csv", (id, name, age + 1, email))
}
```
=== Композирование изменений
=== Пользовательская "Оптика"
=== Персистентные коллекции

== Цель и задачи работы

#let goal(body) = {
    strong("Цель: ")
    body
}

#goal[Разработать дизайн "Оптики" для языка @cangjie на основании опыта других языков и реализовать поддержку "Оптики" в компиляторе `cjc`. Провести анализ текущего решения]

#let objectives(..obj) = {
    strong("Задачи: ")
    set enum(indent: 1.5em)
    enum(..obj)
}

#objectives(
    [Провести анализ существующих решений в функциональных и объектно-ориентированных языках программирования],
    [Провести анализ текущих ограничений языка @cangjie],
    [Реализовать версию "Оптики" на языке @cangjie на основании],
    [Реализовать не библиотеко-специфичные компиляторные оптимизации, улучшающие быстродействие реализации],
    [Определить вектор развития языка, упрощающий реализацию подобных @dsl в будущем])
