#import "../lib.typ": *

#set heading(numbering: none)
= Заключение
В результате мы получили типобезопасное решение, взаимодействие с которым происходит через @dsl, написанный с помощью макросов, работающий как со сгенерированной "Оптикой", так и поддерживающий возможность написания пользовательской "Оптики", импорт/экспорт доступных сигнатур в котором зависит от области видимости, в котором вызывается данный @dsl. Однако, использует структуры для работы с "Оптикой", как с объектом первого класса, что гарантированно бъет по производительности.

В рамках данной работы был разработан дизайн библиотеки "Оптики" для языка @cangjie на основе существующей теории и реализаций других языков программирования. Для этого были решены следующие задачи:
#enum(
    [Для базового сценария была выбрана `getter`/`setter` модель, в дальнейшем модифицированная для поддержания лучшего инлайнинга в языке],
    [Рассмотрены различныеы сценарии, в которых "Оптика" может быть сгенерирована, или предоставлена как модуль библиотеки],
    [Механизм был расшинен с поддерживающего генерируемую оптику, до поддержания пользовательской вместе с сохранением типобезопасности и возможности перегрузки по типу структуры],
    [Полученная реализация протестирована на предмет качества инлайнинга]
)

Однако, для достижения работы с "Оптикой", как с объектом первого класса, библиотека все еще использует пары структур, что как показал анализ, сильно бъет по производительнсти. Привееднный дизайн уже может быть, потенциально предоставлен как third-party библиотека для языка, но все еще имеет множество открытых задач, некоторые из них:
- Вопрос поддержания полиморфной "Оптики"
- Понятные сообщения об ошибках
- Модуль "Оптики" для стандартной библиотеки
- Работа с замкнутыми иерархиями

Кроме этого, в процессе работы было обнаружено множество багов в различных частях компилятора `cjc` и направлений для его потенциальных улучшений в дальнейшем.

